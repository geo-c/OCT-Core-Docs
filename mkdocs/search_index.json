{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\u00b6\n\n\nWelcome to the Documentation of the \nOCT-Core\n.",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "Welcome to the Documentation of the  OCT-Core .",
            "title": "Welcome"
        },
        {
            "location": "/architecture/overview/",
            "text": "Simplified version\n\u00b6\n\n\n\n\nDetailed version\n\u00b6",
            "title": "Overview"
        },
        {
            "location": "/architecture/database-schema/",
            "text": "Examples\n\n\nSQL-Schema\n\n\n\n\n\n\n\n\n\n\n1\n\n\nApps\n\n\n\n\n\n\n2\n\n\nLogs\n\n\n\n\n\n\n3\n\n\nAdmins\n\n\n\n\n\n\n4\n\n\nDatastores\n\n\n\n\n\n\n5\n\n\nEndpoints\n\n\n\n\n\n\n6\n\n\nCategories\n\n\n\n\n\n\n7\n\n\nCategories_Relationships\n\n\n\n\n\n\n8\n\n\nMain_Datasets\n\n\n\n\n\n\n9\n\n\nSub_Datasets\n\n\n\n\n\n\n10\n\n\nTags\n\n\n\n\n\n\n11\n\n\nQueries\n\n\n\n\n\n\n12\n\n\nParameters\n\n\n\n\n\n\n13\n\n\nVisitors\n\n\n\n\n\n\n\n\nThe following figure shows the database-schema:\n\n\n\n\n\n\n1. Apps\n\u00b6\n\n\n\n\n\n\n\n\napp_id\n\n\napp_name\n\n\napp_hash\n\n\napp_description\n\n\nemail_address\n\n\nfirst_name\n\n\nlast_name\n\n\n\n\n\n\n\n\n\n\n1\n\n\ntest\n\n\nabc123def456ghj789klm\n\n\ntest app\n\n\nmax@mustermann.com\n\n\nMax\n\n\nMustermann\n\n\n\n\n\n\n\n\n2. Logs\n\u00b6\n\n\n\n\n\n\n\n\nlog_id\n\n\napp_hash\n\n\ntimestamp\n\n\ncategory_id\n\n\n\n\n\n\n\n\n\n\n1\n\n\nabc123def456ghj789klm\n\n\n2016-06-20T07:25:32.112Z\n\n\n1\n\n\n\n\n\n\n2\n\n\nabc123def456ghj789klm\n\n\n2016-06-23T12:43:01.212Z\n\n\n1\n\n\n\n\n\n\n3\n\n\nabc123def456ghj789klm\n\n\n2016-06-23T12:44:10.002Z\n\n\n1\n\n\n\n\n\n\n4\n\n\nabc123def456ghj789klm\n\n\n2016-06-23T12:45:32.090Z\n\n\n2\n\n\n\n\n\n\n5\n\n\nabc123def456ghj789klm\n\n\n2016-06-24T15:12:45.321Z\n\n\n2\n\n\n\n\n\n\n\n\n3. Admins\n\u00b6\n\n\n\n\n\n\n\n\nusername\n\n\npassword\n\n\nemail_address\n\n\nfirst_name\n\n\nlast_name\n\n\nrole\n\n\nexpires_on\n\n\n\n\n\n\n\n\n\n\nn_schi16\n\n\nabc123\n\n\nadmin@example.org\n\n\nNicho\n\n\nS.\n\n\nADMIN\n\n\nNULL\n\n\n\n\n\n\nt_user01\n\n\nxyz789\n\n\ntestuser@example.org\n\n\nTest\n\n\nUser\n\n\nGUEST\n\n\n2017-01-01T00:00:00.000Z\n\n\n\n\n\n\n\n\n4. Datastores\n\u00b6\n\n\n\n\n\n\n\n\nds_id\n\n\nds_type\n\n\nds_description\n\n\nds_host\n\n\nds_port\n\n\nds_instance\n\n\nds_user\n\n\nds_password\n\n\n\n\n\n\n\n\n\n\n1\n\n\nPOSTGRESQL\n\n\nlocal PostgreSQL-Database with installed PostGIS-Extension\n\n\n127.0.0.1\n\n\n5432\n\n\noct_db\n\n\noct\n\n\noct\n\n\n\n\n\n\n2\n\n\nPOSTGRESQL\n\n\nextern PostgreSQL-Database\n\n\nhttp://giv-lodumdata.uni-muenster.de\n\n\n5432\n\n\noct_db_2\n\n\noct\n\n\noct\n\n\n\n\n\n\n3\n\n\nMONGODB\n\n\nlocal MongoDB\n\n\n127.0.0.1\n\n\n27010\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\nCOUCHDB\n\n\nlocal CouchDB\n\n\n127.0.0.1\n\n\n8000\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\nPARLIAMENT\n\n\nlocal Parliament-Server\n\n\n127.0.0.1\n\n\n6000\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\nCKAN\n\n\nlocal CKAN-Datastore\n\n\n127.0.0.1\n\n\n5000\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\nVIRTUOSU\n\n\nlocal Virtuosu-Server\n\n\n127.0.0.1\n\n\n4000\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\nREST\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. Endpoints\n\u00b6\n\n\n\n\n\n\n\n\nendpoint_id\n\n\nendpoint_host\n\n\nendpoint_port\n\n\nendpoint_host\n\n\n\n\n\n\n\n\n\n\n1\n\n\nhttp://giv-oct.uni-muenster.de\n\n\n80\n\n\n/api\n\n\n\n\n\n\n2\n\n\nhttp://envirocar.org\n\n\n80\n\n\n/api/stable/\n\n\n\n\n\n\n3\n\n\nhttp://envirocar.org\n\n\n80\n\n\n/api/dev/\n\n\n\n\n\n\n\n\n6. Categories\n\u00b6\n\n\n\n\n\n\n\n\ncategory_id\n\n\ncategory_name\n\n\n\n\n\n\n\n\n\n\n1\n\n\nPopulation\n\n\n\n\n\n\n2\n\n\nEducation and Science\n\n\n\n\n\n\n3\n\n\nGeography, Geology and Geodata\n\n\n\n\n\n\n4\n\n\nLaw and Justice\n\n\n\n\n\n\n5\n\n\nHealth\n\n\n\n\n\n\n6\n\n\nInfrastructure, Construction and Housing\n\n\n\n\n\n\n7\n\n\nCulture, Leisure, Sport and Tourism\n\n\n\n\n\n\n8\n\n\nPublic administration, Budget and Taxes\n\n\n\n\n\n\n9\n\n\nPolitics and Elections\n\n\n\n\n\n\n10\n\n\nSocial\n\n\n\n\n\n\n11\n\n\nTransport and Traffic\n\n\n\n\n\n\n12\n\n\nEnvironment and Climate\n\n\n\n\n\n\n13\n\n\nConsumer Protection\n\n\n\n\n\n\n14\n\n\nEconomy and Employment\n\n\n\n\n\n\n\n\n7. Category_relationships\n\u00b6\n\n\n\n\n\n\n\n\nmd_id\n\n\ncategory_id\n\n\n\n\n\n\n\n\n\n\n1\n\n\n6\n\n\n\n\n\n\n1\n\n\n11\n\n\n\n\n\n\n1\n\n\n12\n\n\n\n\n\n\n2\n\n\n11\n\n\n\n\n\n\n3\n\n\n11\n\n\n\n\n\n\n3\n\n\n12\n\n\n\n\n\n\n4\n\n\n11\n\n\n\n\n\n\n4\n\n\n12\n\n\n\n\n\n\n\n\n8. Main Datasets\n\u00b6\n\n\n\n\n\n\n\n\nmd_id\n\n\nds_id\n\n\nendpoint_id\n\n\ncreated_by\n\n\nmd_name\n\n\nmd_description\n\n\npublisher\n\n\npublished\n\n\nlicense\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\nn_schi16\n\n\nWater gauges\n\n\nDatasets about a mobile water gauge sensor network\n\n\nNicholas Schiestel\n\n\nJuly 2016\n\n\nMIT\n\n\n\n\n\n\n2\n\n\n1\n\n\n1\n\n\nn_schi16\n\n\nPlants\n\n\nDataset about plants\n\n\nNicholas Schiestel\n\n\nJune 2016\n\n\nMIT\n\n\n\n\n\n\n3\n\n\n8\n\n\n2\n\n\nn_schi16\n\n\nEnviroCar\n\n\nThe EnviroCar Project\n\n\nInstitute for Geoinformatics\n\n\n2013-01-01\n\n\nMIT\n\n\n\n\n\n\n4\n\n\n8\n\n\n3\n\n\nt_user01\n\n\nEnviroCar\n\n\nThe EnviroCar Project\n\n\nInstitute for Geoinformatics\n\n\n2013-01-01\n\n\nMIT\n\n\n\n\n\n\n\n\n9. Sub Datasets\n\u00b6\n\n\n\n\n\n\n\n\nsd_id\n\n\nmd_id\n\n\nmd_name\n\n\nmd_description\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\nSensors\n\n\nThe Sensors table\n\n\n\n\n\n\n2\n\n\n1\n\n\nWater Bodies\n\n\nThe Shapes table\n\n\n\n\n\n\n3\n\n\n1\n\n\nWater Gauges\n\n\nThe Measurements table\n\n\n\n\n\n\n4\n\n\n2\n\n\nFamily\n\n\nThe Families table\n\n\n\n\n\n\n5\n\n\n2\n\n\nGenus\n\n\nThe Genera table\n\n\n\n\n\n\n6\n\n\n2\n\n\nSpecie\n\n\nThe Species table\n\n\n\n\n\n\n7\n\n\n3\n\n\nTracks\n\n\nThe Tracks endpoint\n\n\n\n\n\n\n8\n\n\n3\n\n\nPhenomenons\n\n\nThe Phenomenons endpoint\n\n\n\n\n\n\n9\n\n\n3\n\n\nSensors\n\n\nThe Sensors endpoint\n\n\n\n\n\n\n10\n\n\n3\n\n\nGroups\n\n\nThe Groups endpoint\n\n\n\n\n\n\n11\n\n\n3\n\n\nUsers\n\n\nThe Users endpoint\n\n\n\n\n\n\n12\n\n\n3\n\n\nMeasurements\n\n\nThe Measurements endpoint\n\n\n\n\n\n\n\n\n10. Tags\n\u00b6\n\n\n\n\n\n\n\n\ntag_id\n\n\nsd_id\n\n\ntag_name\n\n\ntag_language\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\nSensors\n\n\nENGLISH\n\n\n\n\n\n\n2\n\n\n1\n\n\nCoordinates\n\n\nENGLISH\n\n\n\n\n\n\n3\n\n\n1\n\n\nGPS\n\n\nENGLISH\n\n\n\n\n\n\n4\n\n\n1\n\n\nSensoren\n\n\nGERMAN\n\n\n\n\n\n\n5\n\n\n1\n\n\nKoordinaten\n\n\nGERMAN\n\n\n\n\n\n\n6\n\n\n2\n\n\nWater Bodies\n\n\nENGLISH\n\n\n\n\n\n\n7\n\n\n1\n\n\nRiver\n\n\nENGLISH\n\n\n\n\n\n\n8\n\n\n1\n\n\nLakes\n\n\nENGLISH\n\n\n\n\n\n\n9\n\n\n1\n\n\nWater gauges\n\n\nENGLISH\n\n\n\n\n\n\n10\n\n\n1\n\n\nWater levels\n\n\nENGLISH\n\n\n\n\n\n\n11\n\n\n1\n\n\nMeasurements\n\n\nENGLISH\n\n\n\n\n\n\n12\n\n\n1\n\n\nDistances\n\n\nENGLISH\n\n\n\n\n\n\n\n\n11. Queries\n\u00b6\n\n\n\n\n\n\n\n\nquery_id\n\n\nsd_id\n\n\nquery_intern\n\n\nquery_extern\n\n\nquery_description\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\nSELECT * FROM Sensors;\n\n\n\n\nList all Sensors\n\n\n\n\n\n\n2\n\n\n1\n\n\nSELECT * FROM Sensors sensors JOIN Shapes water_bodies ON sensors.water_body_id=water_bodies.water_body_id;\n\n\nList all Sensors with their related Water Body\n\n\n\n\n\n\n\n\n3\n\n\n2\n\n\nSELECT * FROM Shapes;\n\n\n\n\nList all Water Bodies\n\n\n\n\n\n\n4\n\n\n3\n\n\nSELECT * FROM Measurements;\n\n\n\n\nList all Water Gauges (Measurements)\n\n\n\n\n\n\n5\n\n\n3\n\n\nSELECT * FROM Measurements WHERE sensor_id=$1;\n\n\n\n\nList all Water Gauges (Measurements) of a Sensor by its sensor_id\n\n\n\n\n\n\n\n\n12. Parameters\n\u00b6\n\n\n\n\n\n\n\n\nparameter_id\n\n\nquery_id\n\n\nparameter_value\n\n\n\n\n\n\n\n\n\n\n1\n\n\n5\n\n\n1\n\n\n\n\n\n\n\n\n13. Visitors\n\u00b6",
            "title": "Database-Schema"
        },
        {
            "location": "/architecture/rest-api/",
            "text": "Status-Codes\n\u00b6\n\n\n\n\n\n\n\n\nCode\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n200\n\n\nRequest successful\n\n\n\n\n\n\n201\n\n\nCreated\n\n\n\n\n\n\n204\n\n\nNo Content\n\n\n\n\n\n\n400\n\n\nBad Request\n\n\n\n\n\n\n401\n\n\nUnauthorized\n\n\n\n\n\n\n403\n\n\nForbidden\n\n\n\n\n\n\n404\n\n\nNot found\n\n\n\n\n\n\n500\n\n\nInternal Server Error\n\n\n\n\n\n\n501\n\n\nNot implemented\n\n\n\n\n\n\n\n\nAuthentication\n\u00b6\n\n\n\n\n\n\n\n\nAbbreviation\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPA\n\n\nPublic access\n\n\n\n\n\n\nUT\n\n\nUser-Access-Token needed\n\n\n\n\n\n\nAT\n\n\nAdmin-Access-Token needed\n\n\n\n\n\n\nAO\n\n\nAdmin only\n\n\n\n\n\n\n\n\nEndpoints\n\u00b6\n\n\n\n\n\n\n\n\nCode\n\n\nEndpoint\n\n\nMethod\n\n\nHeaders\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\n201\n\n\n/api/signup\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n501\n\n\n/api/reset\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/admin/signup\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/admin/login/:username/:password\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n200\n\n\n/api/apps\n\n\nGET\n\n\nAT, AO\n\n\n\n\n\n\n\n\n200\n\n\n/api/apps/byDate/:date\n\n\nGET\n\n\nAT, AO\n\n\n\n\n\n\n\n\n201\n\n\n/api/apps/:app_hash/logs\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/apps/:app_hash/logsByCategory\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/apps/:app_hash/logsByDataset\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/categories\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/categories/:category_id/apps\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/categories/byDate/:date\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/categories/withDatasets\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/categories/withDatasets/:category_id\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/tdataset\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/tdataset/:sd_id\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/main_database\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/database_all\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/database_all/:username\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/query/:category_name\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n204\n\n\n/query/point/:lat/:lon/:dst\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/dataset/:query_extern\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n204\n\n\n/api/querycheck\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/spatial/:md_id\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/sub_database/:md_name\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/submit\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n201\n\n\n/api/update\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n200\n\n\n/api/visitor\n\n\nPOST\n\n\nPA\n\n\n\n\n\n\n\n\n200\n\n\n/api/visitors/:status/:value\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n200\n\n\n/api/visitors/:status/:value/:timeFrom\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n200\n\n\n/api/visitors/:status/:value/:timeFrom/:timeTo\n\n\nGET\n\n\nPA\n\n\n\n\n\n\n\n\n\n\nRequired Data\n\u00b6\n\n\n/api/signup\n\n\n{\n    app_name: \"\",\n    app_description: \"\",\n    email:address: \"\",\n    first_name: \"\",\n    last_name_: \"\"\n\n}\n\n\n\n\n\n/api/admin/signup\n\n\n{\n    username: \"\",\n    password: \"\",\n    first_name: \"\",\n    last_name_: \"\",\n    email: \"\"\n}\n\n\n\n\n\n/api/submit\n\n\n{\n    ds_type: \"\",\n    ds_description: \"\",\n    ds_host: \"\",\n    ds_port: \"\",\n    ds_instance: \"\",\n    db_user: \"\",\n    db_password: \"\",\n    created_by: \"\",\n    md_name: \"\",\n    md_description: \"\",\n    publisher: \"\",\n    published: \"\",\n    license: \"\",\n    sd_name: \"\",\n    sd_description: \"\",\n    query_intern: \"\",\n    query_extern: \"\",\n    query_description: \"\",\n    categories: [\"\"]\n}\n\n\n\n\n\n/api/update\n\n\n{\n    ds_id: \"\",\n    ds_type: \"\",\n    ds_description: \"\",\n    ds_host: \"\",\n    ds_port: \"\",\n    ds_instance: \"\",\n    db_user: \"\",\n    db_password: \"\",\n    created_by: \"\",\n    md_id: \"\",\n    md_name: \"\",\n    md_description: \"\",\n    publisher: \"\",\n    published: \"\",\n    license: \"\",\n    sd_name: \"\",\n    sd_description: \"\",\n    query_id: \"\",\n    active: \"\",\n    query_intern: \"\",\n    query_extern: \"\",\n    query_description: \"\",\n    categories: [\"\"]\n\n}\n\n\n\n\n\n/api/visitor\n\n\n{\n    city: \"\",\n    country_code: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    metro_code: \"\",\n    region_code: \"\",\n    time_zone: \"\",\n    zip_code: \"\"\n}",
            "title": "REST-API"
        },
        {
            "location": "/installation/1_database/",
            "text": "Database\n\n\nRequirements:\n  Linux Ubuntu 14.04\n\n\n\n\nInstallation PostgreSQL\n\n\n\n\nhttps://www.postgresql.org/download/linux/ubuntu/\n\n\n\n\nInstallation PostGIS\n\n\n\n\nhttp://postgis.net/install/\n\n\n\n\nBuilding Database\n\n\n\n\nUse Instructions From Schemas. You can use the structure provided by this documentation",
            "title": "1. Setting up Database"
        },
        {
            "location": "/installation/2_installation/",
            "text": "Installation\n\n\n\n\nDownloading the code\n\n\n\n\nDownload the code from: \nhttps://github.com/geo-c/OCT-Core\n\n Place the Code on your machine. Recommended:\n\n\n ~/OCT-Core/\n\n\n\n\n\n\nInstalling NodeJS\n\n\n\n\nhttps://nodejs.org/en/download/package-manager/\n\n\n\n\nInstalling Packages\n\n\n\n\n$ cd ~/OCT-Core\n$ npm install",
            "title": "2. Installation"
        },
        {
            "location": "/installation/3_usage/",
            "text": "Usage\n\n\n\n\nStart the Server\n\n\n\n\n$ cd ~/OCT-Core\n$ node server.js --api_port [port] --database_name [db_name] --postgres_user [db_user] --postgres_password [db_password] --email_user [email_user] --email_password [email_password]\n\n\n\n\n\n\n\n\n[port]\n : Port the API listens to\n\n\n\n\n\n\n[db_name]\n : Name of the PostgreSQL Database\n\n\n\n\n\n\n[db_user]\n : User of the PostgreSQL Database\n\n\n\n\n\n\n[db_password]\n : Password of the PostgreSQL Database\n\n\n\n\n\n\n[email_user]\n : Email Address from where Regestration Messages are sent\n\n\n\n\n\n\n[email_password]\n : Password for Email Account\n\n\n\n\n\n\nTo Run the Server you can use the Node Module forever\n\n\n$ cd ~/OCT-Core\n$ forever start server.js --api_port [port] --database_name [db_name] --postgres_user [db_user] --postgres_password [db_password] --email_user [email_user] --email_password [email_password]\n\n\n\n\n\n\n\n\nStop the Server\n\n\n\n\n$ cd ~/OCT-Core\n$ forever stop server.js",
            "title": "3. Usage"
        },
        {
            "location": "/installation/docker/",
            "text": "Docker\n\n\nRequirements:\n  Docker, Docker compose\n\n\n\n\nDocker Compose\n\n\n\n\nhttps://docs.docker.com/compose/\n\n\n\n\nDocker\n\n\n\n\nhttps://docs.docker.com/\n\n\n\n\nGet Data\n\n\n\n\nDownload the folder with the Dockerfiles from the Github Repository OCT-Core-Docs\n\nhttps://github.com/geo-c/OCT-Core-Docs/tree/master/Installation\n\n\nGo into the downloaded directory and start the application.\nUse Flag -d to run as daemon.\n\n\n'''\n$ sudo docker-compose up\n'''\n\n\nNow you have to define the IP address of this container.\n\n\nGet IP address from service /docker_postgis_1\n'''\nsudo docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(sudo docker ps -aq)\n'''\n\n\nSet IP address inside container.\n'''\n$ sudo docker-compose exec oct bash\n$ apt-get install -y nano\n$ nano config/db.js\n'''\n\n\nTo Update the database count regulary, execute the UpdateCount.sh from crontab. For e.g. every 10 Minutes\n\n\nTo Backup your database execute the backUpDatabase.sh or this code:\n'''\n$ sudo docker-compose exec postgis pg_dumpall -c -U oct> dump_\ndate +%d-%m-%Y\"_\"%H_%M_%S\n.sql\n'''\n\n\nTo Restore the Ddtabase to a former state use this command:\n'''\n$ cat dump_name.sql | sudo docker-compose exec -i postgis psql -U oct\n'''\n\n\nUseful commands for further maintanance:\n\n\nGetting inside a docker container(postgis or oct):\n'''\n$ sudo docker-compose exec postgis bash\n'''\n\n\nCopy files into a container:\n'''\n$ sudo docker cp /\npath\n/\nto\n/\nfile\n \"$(sudo docker-compose ps -q oct)\":/home/oct/OCT-Core/\npath\n/\nfile\n\n'''",
            "title": "Docker"
        },
        {
            "location": "/schemas/0_reset/",
            "text": "DROP TABLE IF EXISTS Apps CASCADE;\nDROP TABLE IF EXISTS Logs CASCADE;\n\nDROP TABLE IF EXISTS Admins CASCADE;\nDROP TABLE IF EXISTS Datastores CASCADE;\nDROP TABLE IF EXISTS Endpoints CASCADE;\nDROP TABLE IF EXISTS Categories CASCADE;\nDROP TABLE IF EXISTS Main_Datasets CASCADE;\nDROP TABLE IF EXISTS Categories_Relationships CASCADE;\nDROP TABLE IF EXISTS Sub_Datasets CASCADE;\nDROP TABLE IF EXISTS Tags CASCADE;\nDROP TABLE IF EXISTS Queries CASCADE;\nDROP TABLE IF EXISTS Parameters CASCADE;",
            "title": "Resetting"
        },
        {
            "location": "/schemas/1_apps/",
            "text": "DROP TABLE IF EXISTS Apps CASCADE;\nDROP TABLE IF EXISTS Logs CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.apps\n(\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  app_name character varying(255) NOT NULL,\n  app_hash character varying(255) NOT NULL,\n  app_description character varying(255),\n  email_address character varying(255) NOT NULL,\n  first_name character varying(255) NOT NULL,\n  last_name character varying(255) NOT NULL,\n  CONSTRAINT apps_app_hash_key UNIQUE (app_hash),\n  CONSTRAINT apps_app_name_key UNIQUE (app_name)\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Apps (created, updated, app_name, app_hash, app_description, email_address, first_name, last_name)\nVALUES (now(), now(), 'test', 'abc123def456ghj789klm', 'test app', 'max@mustermann.com', 'Max', 'Mustermann');",
            "title": "1. Apps"
        },
        {
            "location": "/schemas/2_logs/",
            "text": "DROP TABLE IF EXISTS Logs CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.logs\n(\n  app_hash character varying(255) NOT NULL,\n  \"timestamp\" timestamp with time zone NOT NULL,\n  category_id integer,\n  sd_id integer,\n  location_id integer,\n  CONSTRAINT logs_app_hash_fkey FOREIGN KEY (app_hash)\n      REFERENCES public.apps (app_hash) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT logs_category_id_fkey FOREIGN KEY (category_id)\n      REFERENCES public.categories (category_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT logs_sd_id_fkey FOREIGN KEY (sd_id)\n      REFERENCES public.sub_datasets (sd_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT logs_location_id_fkey FOREIGN KEY (location_id)\n    REFERENCES public.visitors (id)\n    ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Logs (app_hash, timestamp, category_id)\nVALUES ('abc123def456ghj789klm', '2016-06-20T07:25:32.112Z', 1);\n\nINSERT INTO Logs (app_hash, timestamp, category_id)\nVALUES ('abc123def456ghj789klm', '2016-06-23T12:43:01.212Z', 1);\n\nINSERT INTO Logs (app_hash, timestamp, category_id)\nVALUES ('abc123def456ghj789klm', '2016-06-23T12:44:10.002Z', 1);\n\nINSERT INTO Logs (app_hash, timestamp, category_id)\nVALUES ('abc123def456ghj789klm', '2016-06-23T12:45:32.090Z', 2);\n\nINSERT INTO Logs (app_hash, timestamp, category_id)\nVALUES ('abc123def456ghj789klm', '2016-06-24T15:12:45.321Z', 2);",
            "title": "2. Logs"
        },
        {
            "location": "/schemas/3_admins/",
            "text": "DROP TABLE IF EXISTS Admins CASCADE;\nDROP TYPE IF EXISTS roles CASCADE;\n\n-- ENUM\nCREATE TYPE roles AS ENUM (\n    'ADMIN',\n    'GUEST'\n);\n\n-- SCHEMA\nCREATE TABLE public.admins\n(\n  username character varying(255) NOT NULL,\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  password character varying(255) NOT NULL,\n  email_address character varying(255) NOT NULL,\n  first_name character varying(255) NOT NULL,\n  last_name character varying(255) NOT NULL,\n  expires_on timestamp with time zone,\n  role roles NOT NULL,\n  CONSTRAINT admins_username_key UNIQUE (username)\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Admins (created, updated, username, role, password, email_address, first_name, last_name, expires_on)\nVALUES (now(), now(), 'n_schi16', 'ADMIN', 'abc123', 'n.schiestel@uni-muenster.de', 'Nicho', 'S.', NULL);\n\nINSERT INTO Admins (created, updated, username, role, password, email_address, first_name, last_name, expires_on)\nVALUES (now(), now(), 'test', 'GUEST', 'xyz789', 'testuser@example.org', 'Test', 'User', '2017-01-01');",
            "title": "3. Admins"
        },
        {
            "location": "/schemas/4_datastores/",
            "text": "DROP TABLE IF EXISTS Datastores CASCADE;\nDROP TYPE IF EXISTS types CASCADE;\n\n-- ENUM\nCREATE TYPE types AS ENUM (\n    'REST',\n    'POSTGRESQL',\n    'MYSQL',\n    'MONGODB',\n    'COUCHDB',\n    'PARLIAMENT',\n    'CKAN',\n    'VIRTUOSU'\n);\n\n\n-- SCHEMA\nCREATE TABLE public.datastores\n(\n  ds_id integer NOT NULL DEFAULT nextval('datastores_ds_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  ds_description character varying(255),\n  ds_host character varying(255),\n  ds_port integer,\n  db_instance character varying(255),\n  db_user character varying(255),\n  db_password character varying(255),\n  ds_type types NOT NULL,\n  CONSTRAINT datastores_pkey PRIMARY KEY (ds_id)\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'POSTGRESQL', 'local PostgreSQL-Database with installed PostGIS-Extension', '127.0.0.1', 5432, 'oct_db', 'oct', 'oct');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'POSTGRESQL', 'extern PostgreSQL-Database', 'http://giv-lodumdata.uni-muenster.de', 5432, 'oct_db_2', 'oct', 'oct');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'MONGODB', 'local MongoDB', '127.0.0.1', 27010, '', '', '');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'COUCHDB', 'local CouchDB', '127.0.0.1', 8000, '', '', '');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'PARLIAMENT', 'local Parliament-Server', '127.0.0.1', 6000, '', '', '');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'CKAN', 'local CKAN-Datastore', '127.0.0.1', 5000, '', '', '');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'VIRTUOSU', 'local Virtuosu-Server', '127.0.0.1', 4000, '', '', '');\n\nINSERT INTO Datastores (created, updated, ds_type, ds_description, ds_host, ds_port, db_instance, db_user, db_password)\nVALUES (now(), now(), 'REST', NULL, NULL, NULL, NULL, NULL, NULL);",
            "title": "4. Datastores"
        },
        {
            "location": "/schemas/5_endpoints/",
            "text": "DROP TABLE IF EXISTS Endpoints CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.endpoints\n(\n  endpoint_id integer NOT NULL DEFAULT nextval('endpoints_endpoint_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  endpoint_host character varying(255) NOT NULL,\n  endpoint_port integer NOT NULL DEFAULT 80,\n  endpoint_path character varying(255) NOT NULL DEFAULT '/'::character varying,\n  CONSTRAINT endpoints_pkey PRIMARY KEY (endpoint_id)\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Endpoints (created, updated, endpoint_host, endpoint_port, endpoint_path)\nVALUES (now(), now(), 'http://giv-oct.uni-muenster.de', 80, '/api');\n\nINSERT INTO Endpoints (created, updated, endpoint_host, endpoint_port, endpoint_path)\nVALUES (now(), now(), 'http://envirocar.org', 80, '/api/stable/');\n\nINSERT INTO Endpoints (created, updated, endpoint_host, endpoint_port, endpoint_path)\nVALUES (now(), now(), 'http://envirocar.org', 80, '/api/dev/');",
            "title": "5. Endpoints"
        },
        {
            "location": "/schemas/6_categories/",
            "text": "DROP TABLE IF EXISTS Categories CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.categories\n(\n  category_id integer NOT NULL DEFAULT nextval('categories_category_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  category_name character varying(255) NOT NULL,\n  CONSTRAINT categories_pkey PRIMARY KEY (category_id)\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Population');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Education and Science');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Geography, Geology and Geodata');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Law and Justice');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Health');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Infrastructure, Construction and Housing');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Culture, Leisure, Sport and Tourism');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Public administration, Budget and Taxes');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Politics and Elections');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Social');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Transport and Traffic');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Environment and Climate');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Consumer Protection');\n\nINSERT INTO Categories (created, updated, category_name)\nVALUES (now(), now(), 'Economy and Employment');",
            "title": "6. Categories"
        },
        {
            "location": "/schemas/7_categories_relationships/",
            "text": "DROP TABLE IF EXISTS Categories_Relationships CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.categories_relationships\n(\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  md_id integer NOT NULL,\n  category_id integer NOT NULL,\n  CONSTRAINT categories_relationships_category_id_fkey FOREIGN KEY (category_id)\n      REFERENCES public.categories (category_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT categories_relationships_md_id_fkey FOREIGN KEY (md_id)\n      REFERENCES public.main_datasets (md_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 1, 6);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 1, 11);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 1, 12);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 2, 11);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 3, 11);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 3, 12);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 4, 11);\n\nINSERT INTO Categories_Relationships (created, updated, md_id, category_id)\nVALUES (now(), now(), 4, 12);",
            "title": "7. Categories-Relationships"
        },
        {
            "location": "/schemas/8_main_datasets/",
            "text": "DROP TABLE IF EXISTS Main_Datasets CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.main_datasets\n(\n  md_id integer NOT NULL DEFAULT nextval('main_datasets_md_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  ds_id integer NOT NULL,\n  endpoint_id integer NOT NULL,\n  created_by character varying(255) NOT NULL,\n  md_name character varying(255) NOT NULL,\n  md_description character varying(255) NOT NULL,\n  publisher character varying(255) NOT NULL,\n  published character varying(255) NOT NULL,\n  license character varying(255),\n  CONSTRAINT main_datasets_pkey PRIMARY KEY (md_id),\n  CONSTRAINT main_datasets_created_by_fkey FOREIGN KEY (created_by)\n      REFERENCES public.admins (username) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT main_datasets_ds_id_fkey FOREIGN KEY (ds_id)\n      REFERENCES public.datastores (ds_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE,\n  CONSTRAINT main_datasets_endpoint_id_fkey FOREIGN KEY (endpoint_id)\n      REFERENCES public.endpoints (endpoint_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Main_Datasets (created, updated, ds_id, endpoint_id, created_by, md_name, md_description, publisher, published, license)\nVALUES (now(), now(), 1, 1, 'n_schi16', 'Water gauges', 'Datasets about a mobile water gauge sensor network', 'Nicholas Schiestel', 'July 2016', 'MIT');\n\nINSERT INTO Main_Datasets (created, updated, ds_id, endpoint_id, created_by, md_name, md_description, publisher, published, license)\nVALUES (now(), now(), 1, 1, 'n_schi16', 'Plants', 'Dataset about plants', 'Nicholas Schiestel', 'June 2016', 'MIT');\n\nINSERT INTO Main_Datasets (created, updated, ds_id, endpoint_id, created_by, md_name, md_description, publisher, published, license)\nVALUES (now(), now(), 8, 2, 'n_schi16', 'EnviroCar', 'The EnviroCar Project', 'Institute for Geoinformatics', '2013-01-01', 'MIT');\n\nINSERT INTO Main_Datasets (created, updated, ds_id, endpoint_id, created_by, md_name, md_description, publisher, published, license)\nVALUES (now(), now(), 8, 3, 'test', 'EnviroCar', 'The EnviroCar Project', 'Institute for Geoinformatics', '2013-01-01', 'MIT');",
            "title": "8. Main-Datasets"
        },
        {
            "location": "/schemas/9_sub_datasets/",
            "text": "DROP TABLE IF EXISTS Sub_Datasets CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.sub_datasets\n(\n  sd_id integer NOT NULL DEFAULT nextval('sub_datasets_sd_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  md_id integer,\n  sd_name character varying(255) NOT NULL,\n  sd_description character varying(255) NOT NULL,\n  CONSTRAINT sub_datasets_pkey PRIMARY KEY (sd_id),\n  CONSTRAINT sub_datasets_md_id_fkey FOREIGN KEY (md_id)\n      REFERENCES public.main_datasets (md_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 1, 'Sensors', 'The Sensors table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 1, 'Water Bodies', 'The Shapes table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 1, 'Water Gauges', 'The Measurements table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 2, 'Family', 'The Families table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 2, 'Genus', 'The Genera table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 2, 'Specie', 'The Species table');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Tracks', 'The Tracks endpoint');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Phenomenons', 'The Phenomenons endpoint');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Sensors', 'The Sensors endpoint');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Groups', 'The Groups endpoint');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Users', 'The Users endpoint');\n\nINSERT INTO Sub_Datasets (created, updated, md_id, sd_name, sd_description)\nVALUES (now(), now(), 3, 'Measurements', 'The Measurements endpoint');",
            "title": "9. Sub-Datasets"
        },
        {
            "location": "/schemas/10_tags/",
            "text": "DROP TABLE IF EXISTS Tags CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.tags\n(\n  tag_id integer NOT NULL DEFAULT nextval('tags_tag_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  sd_id integer NOT NULL,\n  tag_name character varying(255) NOT NULL,\n  CONSTRAINT tags_pkey PRIMARY KEY (tag_id),\n  CONSTRAINT tags_sd_id_fkey FOREIGN KEY (sd_id)\n      REFERENCES public.sub_datasets (sd_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n\n-- EXAMPLE-DATA\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 1, 'Sensors');\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 1, 'Measurements');\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 1, 'Car');\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 1, 'Cars');\n\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 2, 'Sensors');\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 2, 'Measurements');\n\nINSERT INTO Tags (created, updated, sd_id, tag_name)\nVALUES (now(), now(), 2, 'Water gauges');",
            "title": "10. Tags"
        },
        {
            "location": "/schemas/11_queries/",
            "text": "DROP TABLE IF EXISTS Queries CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.queries\n(\n  query_id integer NOT NULL DEFAULT nextval('queries_query_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  sd_id integer NOT NULL,\n  query_intern text,\n  query_extern character varying(500),\n  query_description character varying(500) NOT NULL,\n  active boolean,\n  CONSTRAINT queries_pkey PRIMARY KEY (query_id),\n  CONSTRAINT queries_sd_id_fkey FOREIGN KEY (sd_id)\n      REFERENCES public.sub_datasets (sd_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n-- EXAMPLE-DATA\nINSERT INTO Queries (created, updated, sd_id, query_intern, query_extern, query_description)\nVALUES (now(), now(), 1, 'SELECT * FROM Sensors;', NULL, 'List all Sensors');\n\nINSERT INTO Queries (created, updated, sd_id, query_intern, query_extern, query_description)\nVALUES (now(), now(), 1, 'SELECT * FROM Sensors sensors JOIN Shapes water_bodies ON sensors.water_body_id=water_bodies.water_body_id;', NULL, 'List all Sensors with their related Water Body');\n\nINSERT INTO Queries (created, updated, sd_id, query_intern, query_extern, query_description)\nVALUES (now(), now(), 2, 'SELECT * FROM Shapes;', NULL, 'List all Water Bodies');\n\nINSERT INTO Queries (created, updated, sd_id, query_intern, query_extern, query_description)\nVALUES (now(), now(), 2, 'SELECT * FROM Measurements;', NULL, 'List all Water Gauges (Measurements)');\n\nINSERT INTO Queries (created, updated, sd_id, query_intern, query_extern, query_description)\nVALUES (now(), now(), 2, 'SELECT * FROM Measurements WHERE sensor_id=$1;', NULL, 'List all Water Gauges (Measurements) of a Sensor by its sensor_id');",
            "title": "11. Queries"
        },
        {
            "location": "/schemas/12_parameters/",
            "text": "DROP TABLE IF EXISTS Parameters CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.parameters\n(\n  parameter_id integer NOT NULL DEFAULT nextval('parameters_parameter_id_seq'::regclass),\n  created timestamp with time zone NOT NULL,\n  updated timestamp with time zone NOT NULL,\n  query_id integer,\n  parameter_value character varying(255),\n  CONSTRAINT parameters_pkey PRIMARY KEY (parameter_id),\n  CONSTRAINT parameters_query_id_fkey FOREIGN KEY (query_id)\n      REFERENCES public.queries (query_id) MATCH SIMPLE\n      ON UPDATE CASCADE ON DELETE CASCADE\n)\n\n-- EXAMPLE-DATA\nINSERT INTO Parameters (created, updated, query_id, parameter_value)\nVALUES (now(), now(), 5, '1');",
            "title": "12. Parameters"
        },
        {
            "location": "/schemas/13_visitors/",
            "text": "DROP TABLE IF EXISTS Visitors CASCADE;\n\n\n-- SCHEMA\nCREATE TABLE public.visitors\n(\n  id integer NOT NULL DEFAULT nextval('visitors_id_seq'::regclass),\n  date timestamp with time zone NOT NULL,\n  country_code character varying(255),\n  country_name character varying(255),\n  latitude character varying(255),\n  longitude character varying(255),\n  metro_code character varying(255),\n  region_code character varying(255),\n  region_name character varying(255),\n  time_zone character varying(255),\n  zip_code character varying(255),\n\n\n\n  CONSTRAINT visitors_pkey PRIMARY KEY (id)\n)",
            "title": "13. Visitors"
        },
        {
            "location": "/structure/folder_structure/",
            "text": "Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nThis folder holds Javascript files which hold information to configure the website\n\n\n\n\n\n\ncontrollers\n\n\nThis folder holds all Javascript files which contain the programm logic\n\n\n\n\n\n\nmodels\n\n\nThis folder contains Files which define the structure of data the programm expects\n\n\n\n\n\n\npublic\n\n\nThis folder cointains the website which displays information and has an User Interface to interact with the API Interface\n\n\n\n\n\n\nroutes\n\n\nHere are all routes defined which the REST-API listens to.\n\n\n\n\n\n\ntemplates\n\n\nIn this folder are templates for e.g. letters send by email\n\n\n\n\n\n\n\n\nFiles:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npackage.json\n\n\nAll included nodejs packages\n\n\n\n\n\n\nserver.js\n\n\nHere the Programm is started. To start the programm use the following command\n\n\n\n\n\n\n\n\n    $ nodejs server.js --api_port <<port>> --database_name <<name>> --postgres_user <<user>> --postgres_password <<password>> --email_user <<email>> --email_password <<email_password>>\n\n\n\n\n2. controllers\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadmin\n\n\nAll logic regarding the admin\n\n\n\n\n\n\napps\n\n\nAll logic regarding the apps\n\n\n\n\n\n\ncategories\n\n\nAll logic regarding categories\n\n\n\n\n\n\nconnectors\n\n\nHere are connectors which connect to external databases\n\n\n\n\n\n\ndataset\n\n\nAll logic regarding datasets\n\n\n\n\n\n\nlogs\n\n\nAll logic regarding the logs\n\n\n\n\n\n\nmain_database\n\n\nAll logic regarding the main_database\n\n\n\n\n\n\nquery\n\n\nHere is the logic to query the database\n\n\n\n\n\n\nspatial\n\n\nWork in Progress. In here lies the logic to scan datasets for spatial information and store them in a database\n\n\n\n\n\n\nstats\n\n\nHere are statistical data generated and given back to the user\n\n\n\n\n\n\nsub_database\n\n\nAll logic regarding sub_database\n\n\n\n\n\n\nsubmit\n\n\nHere is the logic to submit new datasets\n\n\n\n\n\n\ntags\n\n\nAll logic regarding tags\n\n\n\n\n\n\nupdate\n\n\nHere is the logic to update existing datasets\n\n\n\n\n\n\n\n\nFiles:\n\n\n4. public\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfigure\n\n\nSide for Admins to configure and add their datasets\n\n\n\n\n\n\ncss\n\n\nAll styling for this website\n\n\n\n\n\n\nimg\n\n\nAll images needed\n\n\n\n\n\n\njs\n\n\nAll Javascript files\n\n\n\n\n\n\nlib\n\n\nExternal libraries which are used by this website\n\n\n\n\n\n\nmap\n\n\nSide with a map for displaying visitors",
            "title": "1. Folder Structure"
        },
        {
            "location": "/tutorial/1_AppKey/",
            "text": "Create you own API key\n\u00b6\n\n\n\n\nVisit the Open City Toolkit page: \n\n\n\n\nhttp://giv-oct.uni-muenster.de:8081/\n\n\n\n\n\n\nSelect \nGet an API Key\n. An empty from will open.  \n\n\n\n\n\n\n\n\nFillin the form with App details\n\n\n\n\n\n\n\n\nApply and you will get your API Key \n\n\n\n\n\n\nYour key has also been sent to your email address\n\n\nThe URL of the API is: http://giv-oct.uni-muenster.de:8080/api/\n\n\nYou can query the databases with http://giv-oct.uni-muenster.de:8080/api/query/\n:categoryname:\n?authorization=\nYourAPIKey\n\n\n\n\nUse the API Key \n\n\n\n\nWhen you enter the following get request in you browser you get the JSON responce \n\nhttp://giv-oct.uni-muenster.de:8080/api/query/Traffic?authorization=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfbmFtZSI6Ik1heCIsImlhdCI6MTQ3NDk4MzcwMX0.gaJOuK6yPO0s8CaMDHsYCvf0i6bnzDqLR2JO5krdBAs\n\n\n\n\nYou can change the query for example to \nSocial\n.\n\nhttp://giv-oct.uni-muenster.de:8080/api/query/Social?authorization=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfbmFtZSI6Ik1heCIsImlhdCI6MTQ3NDk4MzcwMX0.gaJOuK6yPO0s8CaMDHsYCvf0i6bnzDqLR2JO5krdBAs\n\n\nAs responce you will get an other data collection\n\n\n\n\nFurther request you will find hier: \nhttp://giv-oct.uni-muenster.de:8080/docs/architecture/rest-api/\n\n\nNext --> Use a Database",
            "title": "1. Generate a API Key"
        },
        {
            "location": "/tutorial/1_AppKey/#create-you-own-api-key",
            "text": "Visit the Open City Toolkit page:    http://giv-oct.uni-muenster.de:8081/    Select  Get an API Key . An empty from will open.       Fillin the form with App details     Apply and you will get your API Key     Your key has also been sent to your email address  The URL of the API is: http://giv-oct.uni-muenster.de:8080/api/  You can query the databases with http://giv-oct.uni-muenster.de:8080/api/query/ :categoryname: ?authorization= YourAPIKey   Use the API Key    When you enter the following get request in you browser you get the JSON responce  http://giv-oct.uni-muenster.de:8080/api/query/Traffic?authorization=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfbmFtZSI6Ik1heCIsImlhdCI6MTQ3NDk4MzcwMX0.gaJOuK6yPO0s8CaMDHsYCvf0i6bnzDqLR2JO5krdBAs   You can change the query for example to  Social . http://giv-oct.uni-muenster.de:8080/api/query/Social?authorization=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfbmFtZSI6Ik1heCIsImlhdCI6MTQ3NDk4MzcwMX0.gaJOuK6yPO0s8CaMDHsYCvf0i6bnzDqLR2JO5krdBAs  As responce you will get an other data collection   Further request you will find hier:  http://giv-oct.uni-muenster.de:8080/docs/architecture/rest-api/  Next --> Use a Database",
            "title": "Create you own API key"
        },
        {
            "location": "/tutorial/2_CreateDatabase/",
            "text": "Coming soon ...",
            "title": "2. Add a Database"
        },
        {
            "location": "/tutorial/3_AndriodApp/",
            "text": "Coming soon ...",
            "title": "3. Implement a Simple Andriod App"
        },
        {
            "location": "/about/repositories/",
            "text": "Repositories\n\u00b6\n\n\n\n\nOCT-Core\n\n\nCore of the Open-City-Toolkit (User-Interface & REST-API)\n\n \nhttps://github.com/geo-c/OCT-Core.git\n\n\n\n\n\n\nOCT-Core-Docs\n\n\nThe OCT-Core-Documentation written in Markdown, built with MkDocs\n\n \nhttps://github.com/geo-c/OCT-Core-Docs.git",
            "title": "Repositories"
        },
        {
            "location": "/about/repositories/#repositories",
            "text": "OCT-Core  Core of the Open-City-Toolkit (User-Interface & REST-API)   https://github.com/geo-c/OCT-Core.git    OCT-Core-Docs  The OCT-Core-Documentation written in Markdown, built with MkDocs   https://github.com/geo-c/OCT-Core-Docs.git",
            "title": "Repositories"
        },
        {
            "location": "/about/contributors/",
            "text": "Contributors\n\u00b6\n\n\n\n\nAuriol Degbelo \n \naurideg\n\n\nJonas Wissing \n \nJonasWissing\n\n\nNicholas Schiestel \n \nnicho90",
            "title": "Contributors"
        },
        {
            "location": "/about/contributors/#contributors",
            "text": "Auriol Degbelo    aurideg  Jonas Wissing    JonasWissing  Nicholas Schiestel    nicho90",
            "title": "Contributors"
        }
    ]
}